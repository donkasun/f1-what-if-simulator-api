name: Branch Issue Management

on:
  push:
    branches-ignore:
      - main
      - develop
      - 'releases/**'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  move-issue-to-in-progress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract issue numbers from branch name
        id: extract-issues
        run: |
          # Extract issue numbers from branch name
          BRANCH_NAME="${{ github.ref_name }}"

          echo "Branch name: $BRANCH_NAME"

          # Patterns to match issue references in branch names
          PATTERNS=(
            "FWI-BE-[0-9]+"
            "feature/FWI-BE-[0-9]+"
            "bugfix/FWI-BE-[0-9]+"
            "hotfix/FWI-BE-[0-9]+"
            "issue-[0-9]+"
            "feature/issue-[0-9]+"
            "bugfix/issue-[0-9]+"
            "hotfix/issue-[0-9]+"
          )

          ISSUES=""

          for pattern in "${PATTERNS[@]}"; do
            if echo "$BRANCH_NAME" | grep -o "$pattern" > /dev/null; then
              ISSUES="$ISSUES $(echo "$BRANCH_NAME" | grep -o "$pattern")"
            fi
          done

          # Remove duplicates and clean up
          ISSUES=$(echo "$ISSUES" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          echo "Found issues: $ISSUES"
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT

      - name: Move issues to In Progress status
        if: steps.extract-issues.outputs.issues != ''
        run: |
          ISSUES="${{ steps.extract-issues.outputs.issues }}"

          for issue in $ISSUES; do
            # Clean up issue reference (extract just the number)
            CLEAN_ISSUE=$(echo "$issue" | sed 's/.*FWI-BE-//' | sed 's/.*issue-//' | sed 's/[^0-9].*//')

            echo "Processing issue: $CLEAN_ISSUE"

            # Check if issue exists and is in a project
            if gh issue view "$CLEAN_ISSUE" --json projectCards > /dev/null 2>&1; then
              echo "Issue $CLEAN_ISSUE found, checking project status..."

                            # Check current labels
              CURRENT_LABELS=$(gh issue view "$CLEAN_ISSUE" --json labels --jq '.labels[].name' 2>/dev/null || echo "")
              echo "Current labels: $CURRENT_LABELS"

              # Only move to In Progress if not already labeled as In Progress, In Review, or Done
              if ! echo "$CURRENT_LABELS" | grep -q "In Progress" && ! echo "$CURRENT_LABELS" | grep -q "In Review" && ! echo "$CURRENT_LABELS" | grep -q "Done"; then
                echo "Moving issue $CLEAN_ISSUE to In Progress status..."

                # Move to In Progress column using GitHub CLI
                gh issue edit "$CLEAN_ISSUE" --add-label "In Progress" || {
                  echo "‚ö†Ô∏è Could not add 'In Progress' label to issue $CLEAN_ISSUE"
                  echo "This might be because the issue doesn't exist or the label doesn't exist"
                }

                # Try to update project status if available
                ITEM_ID=$(gh issue view "$CLEAN_ISSUE" --json 'projectItems(first: 10)' --template '{{range .projectItems.nodes}}{{.id}}{{"\n"}}{{end}}' | head -n 1)

                if [ -n "$ITEM_ID" ]; then
                    echo "Found project item ID: $ITEM_ID. Updating project status..."
                    gh project item-edit --id "$ITEM_ID" --field-name "Status" --single-select-option "In Progress" 2>/dev/null || {
                        echo "‚ÑπÔ∏è Could not update project status for issue $CLEAN_ISSUE (item ID $ITEM_ID)"
                    }
                else
                    echo "‚ÑπÔ∏è Could not find project item for issue $CLEAN_ISSUE (this is normal if not using GitHub Projects)"
                fi

                echo "‚úÖ Successfully moved issue $CLEAN_ISSUE to In Progress status"
                              else
                  echo "‚ÑπÔ∏è Issue $CLEAN_ISSUE is already labeled as In Progress, In Review, or Done, skipping"
                fi
            else
              echo "‚ö†Ô∏è Issue $CLEAN_ISSUE not found or not accessible"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create issue comment about branch creation
        if: steps.extract-issues.outputs.issues != ''
        run: |
          ISSUES="${{ steps.extract-issues.outputs.issues }}"
          BRANCH_NAME="${{ github.ref_name }}"

          for issue in $ISSUES; do
            # Clean up issue reference (extract just the number)
            CLEAN_ISSUE=$(echo "$issue" | sed 's/.*FWI-BE-//' | sed 's/.*issue-//' | sed 's/[^0-9].*//')

            COMMENT="## üåø Branch Created for Development

            A new branch has been created for this issue:

            **Branch:** \`$BRANCH_NAME\`
            **Created by:** @${{ github.actor }}
            **Repository:** ${{ github.repository }}

            The issue has been moved to **In Progress** status.

            ---
            *This action was performed automatically when the branch was created.*"

            gh issue comment "$CLEAN_ISSUE" --body "$COMMENT" || {
              echo "‚ö†Ô∏è Could not add comment to issue $CLEAN_ISSUE"
            }
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log branch creation (no issues found)
        if: steps.extract-issues.outputs.issues == ''
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "‚ÑπÔ∏è Branch '$BRANCH_NAME' created but no issue numbers found in branch name"
          echo "To automatically move issues to 'In Progress' status, use branch names like:"
          echo "  - feature/FWI-BE-123"
          echo "  - bugfix/FWI-BE-456"
          echo "  - issue-789"
          echo "  - feature/issue-101"
